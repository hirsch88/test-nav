import { ComponentInterface, EventEmitter } from '../../stencil-public-runtime';
import { LogInstance, Loggable } from '../../utils/log';
import { BalMutationObserver } from '../../utils/mutation';
import { BalBreakpointObserver, BalBreakpoints } from '../../utils/breakpoints';
import { NavMetaLinkItem } from './models/bal-nav-meta-link-item';
import { NavMetaButton } from './models/bal-nav-meta-button';
import { NavLinkItemObserver } from './bal-nav.types';
import { BalConfigObserver, BalConfigState, BalLanguage, BalRegion } from '../../utils/config';
import { NavMenuLinkItem } from './models/bal-nav-menu-link-item';
import { NavLinkItem } from './models/bal-nav-link-item';
export declare class NavMetaBar implements ComponentInterface, Loggable, BalBreakpointObserver, BalMutationObserver, NavLinkItemObserver, BalConfigObserver {
  private navId;
  private bodyScrollHandler;
  private menuBarEl;
  private metaBarEl;
  el: HTMLElement;
  log: LogInstance;
  isTouch: boolean;
  isDesktop: boolean;
  language: BalLanguage;
  region: BalRegion;
  isFlyoutActive: boolean;
  activeMetaLinkValue?: string;
  activeMenuLinkValue?: string;
  createLogger(log: LogInstance): void;
  logo?: BalProps.BalNavLogoLink;
  options: BalProps.BalNavOptions;
  linkItems: NavMetaLinkItem[];
  protected optionChanged(): Promise<void>;
  buttons: BalProps.BalNavMetaButtons;
  metaButtons: NavMetaButton[];
  protected buttonChanged(): Promise<void>;
  balNavItemClick: EventEmitter<BalEvents.BalNavItemClickDetail>;
  connectedCallback(): void;
  componentWillLoad(): void;
  disconnectedCallback(): void;
  listenToPopupChanges(event: BalEvents.BalPopupChange): void;
  clickOnOutside(ev: UIEvent): Promise<void>;
  mutationObserverActive: boolean;
  mutationListener(): void;
  breakpointListener(breakpoints: BalBreakpoints): void;
  linkItemClickListener(item?: NavLinkItem): void;
  configChanged(state: BalConfigState): Promise<void>;
  private get activeMenuLinkItems();
  private get activeMenuLinkItem();
  private updateTabs;
  private closeAllPopups;
  private onOptionChange;
  private onTouchToggleFlyout;
  private onPopupOpen;
  private onPopupClose;
  private onMetaBarTabChange;
  private onMenuBarTabChange;
  render(): any;
  renderGridLinks(linkItem?: NavMenuLinkItem): any;
  renderTouchMenuAccordions(metaItem: NavMetaLinkItem): any;
  renderLogo(): any;
}
