const t="bal-focused",o=["Tab","ArrowDown","Space","Escape"," ","Shift","Enter","ArrowLeft","ArrowRight","ArrowUp","Home","End"],e='[tabindex]:not([tabindex^="-"]), input:not([type=hidden]):not([tabindex^="-"]), textarea:not([tabindex^="-"]), button:not([tabindex^="-"]), select:not([tabindex^="-"]), .bal-focusable:not([tabindex^="-"])',n=e=>{let n=[],a=!0;const d=e?e.shadowRoot:document,s=e||document.body,u=o=>{n.forEach((o=>o.classList.remove(t))),o.forEach((o=>o.classList.add(t))),n=o},c=()=>{a=!1,u([])},r=t=>{a=o.includes(t.key),a||u([])},i=t=>{if(a&&void 0!==t.composedPath){const o=t.composedPath().filter((t=>!!t.classList&&t.classList.contains("bal-focusable")));u(o)}},b=()=>{d.activeElement===s&&u([])};return d.addEventListener("keydown",r),d.addEventListener("focusin",i),d.addEventListener("focusout",b),d.addEventListener("touchstart",c),d.addEventListener("mousedown",c),{destroy:()=>{d.removeEventListener("keydown",r),d.removeEventListener("focusin",i),d.removeEventListener("focusout",b),d.removeEventListener("touchstart",c),d.removeEventListener("mousedown",c)},setFocus:u}};export{o as FOCUS_KEYS,e as focusableQueryString,n as startFocusVisible}